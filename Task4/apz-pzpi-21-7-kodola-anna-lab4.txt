1	МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ

У системі існує 3 типи користувачів: пацієнт, лікар та адміністратор.
Створена UML діаграма прецедентів для взаємодії цих ролей системи наведена на рисунку 1.
Отже, було створено діаграму прецедентів для ролей системи, яка показує взаємодію користувачів системи з клієнтською частиною програмної системи.

2	ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ 

Для проектування клієнтської частини була розроблена UML діаграма компонентів (див. рис. 2), яка демонструє архітектуру системи та взаємодію її компонентів.

Були виділені наступні компоненти:
-	Appointment – відображення доступних записів на прийом до лікарів для пацієнтів;
-	Payment – відображення рахунків пацієнтів з оплатою за прийоми до лікарів;
-	MedicalRecords – відображення медичних записів пацієнтів;
-	QR-code – відображення QR-code до кожного запису на прийом пацієнта;
-	QR-code-info – відображення отриманої інформації медичних записів пацієнта, який записався на прийом;
-	Schedule – відображення розкладу лікарів у клініках;
-	ExportSchedule – відображення експортування розкадів лікарів у вигляді PDF-файлу.
 
3 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ

Для розробки клієнтської частини було виділено пакети, які складають структуру програмної системи за допомогою Діаграми пакетів (рис. 3).

Згідно діаграми можна побачити, що було виділено такі пакети:
-	src – основний пакет вихідного коду;
-	public – пакет із статичними файлами та файлами публічного доступу;
-	components – пакет компонентів архітектури проєкту;
-	styles – пакет зі стилями;
-	node_module – пакет, який містить сторонні бібліотеки та модулі;
-	assets – пакет статичних файлів.
 
4 ПОБУДОВА ДІАГРАМИ СТАНІВ

Для подальшої розробки клієнтської частини системи було визначено основні функції та інтерфейси за допомогою діаграми станів (див. рис. 4).
Таким чином, було реалізовано діаграму станів, яка показує поведінку клієнтської частини, що залежить від її поточного стану.
 
5 РОЗРОБКА КЛІЄНТСЬКОЇ ЧАСТИНИ

Для розробки клієнтської частини програмної системи було використано React.js, що використовує мову програмування Javascript.
Клієнтська частина надає графічний інтерфейс для відображення створеної бізнес логіки. 
‒	Відображення доступних записів на прийом, можливість створення запису на прийом, можливість сплатити за відвідування, можливість перегляду історії запису на прийом для пацієнтів та лікарів.
‒	Відображення профілю користувача, можливість редагувати його, видаляти дані користувачів для ролі адміністратора.
‒	Відображення розкладу лікарів, можливість створення нового розкладу, редагування та видалення існуючого розкладу, а також можливість експортування розкладі лікарів у вигляді PDF-файлу.
‒	Відображення медичних записів пацієнтів, можливість перегляду усіх медичних записів, а також створення, редагування та видалення медичних записів пацієнта для ролі лікаря.
‒	Можливість сканування QR-коду, що знаходить у блоці записів на прийом до лікаря, який містить інформацію медичних записів відповідного пацієнта.

Відповідно до вимог захисту даних, паролі користувачів не відображаються при перегляді інформації користувачів. Паролі також хешуються, щоб сховати їх при відображені у базі даних. Крім цього під час авторизації кожному користувачу генерується його унікальний токен для кожної сесії, що реалізовано за допомогою jwt.
 
ВИСНОВКИ

У ході виконання лабораторної роботи було здобуто навички з проектування клієнтської частини програмної системи. Була розроблена реалізація клієнтської частини програмної системи. 
При час розробки програмної системи було дотримано вимоги до чистого коду мови програмування JavaScript та бібліотеки React.js. Було розроблено діаграми станів, діаграми пакетів та діаграми компонентів.
