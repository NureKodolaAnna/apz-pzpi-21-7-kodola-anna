1	МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ

Для розробки діаграми прецедентів у системі були виділені такі актори: пацієнт, лікар та адміністратор.
Створена UML діаграма прецедентів для взаємодії цих ролей системи наведена на рисунку 1.

Отже, було створено діаграму прецедентів для ролей системи, яка описує взаємодію користувачів в системі та функції, які вони можуть виконувати.
 
2	ПРОЄКТУВАННЯ БАЗИ ДАНИХ

Для проєктування бази даних було розроблено ER-модель даних (наведена на рис. 2). Були виделені такі сутності  системі: 
-	користувач (User): містить дані про усіх користувачів системи (пацієнтів, лікарів, адміністраторів);
-	медичні записи (MedicalRecord): містить медичні записи пацієнтів, включаючи їх симптоми, діагнози та лікування;
-	розклад (Schedule): містить розклад усіх лікарів з індивідуальними часами роботи;
-	запис на прийом (Appointment): містить інформацію про запис на прийом пацієнтів до лікарів, включаючи вибір додаткових послуг;
-	облік рахунків (Invoice): містить облік усіх платежів та рахунків клінік.

Користувач (User):
- Має зв'язок "один-до-багатьох" із сутністю Медична запис (MedicalRecord) через поле patient_id. Це означає, що один користувач може мати багато медичних записів.
- Має зв'язок "один-до-багатьох" із сутністю Прийом (Appointment) через поле patient_id. Це означає, що один користувач може мати багато прийомів.
- Має зв'язок "один-до-багатьох" із сутністю Розклад (Schedule) через поле doctor_id. Це означає, що один лікар може мати багато розкладів.
- Має зв'язок "один-до-багатьох" із сутністю Рахунок (Invoice) через поле patient_id. Це означає, що один користувач може мати багато рахунків.

Таким чином, було розроблено ER-модель даних, яка показує структуру бази даних системи та взаємозв’язок між сутностями.
 
3	ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ

Для розробки серверної частини програмної системи було обрано програмну платформу Node.js та веь-фреймворк Express.js для зручного створення API та маршрутизації, які використовують мову програмування JavaScript. Середовище розробки – WebStorm. 
Для зберігання даних була обрана база даних MongoDB. Доступ до бази даних з серверного застосунку здійснюється безпосередньо через MongoDB драйвер для Node.js, що забезпечує швидкий доступ та масштабованість.
На рисунку 3 показано розроблену діаграму розгортання.

Таким чином, було створено діаграму розгортання, яка показує, як компоненти системи фізично розташовані та взаємодіють між собою.
 
4	СПЕЦИФІКАЦІЯ REST

Для взаємодії серверу з іншими програмними частинами використовується Rest API. Опис специфікації Rest API наведено в таблиці 1. 

Таблиця 1 – Специфікація REST API
URL                               Метод HTTP	        Ролі доступу	        Призначення
============================================================================================================
api/users/register    	          POST	              Всі користувачі	      Реєстрація користувача в системі
/api/users/login	                POST	              Всі користувачі	      Вхід в обліковий запис системи
/api/users/update/:id	            PUT	                Адміністратор	        Редагування даних облікового запису користувача
/api/users/delete/:id	            DELETE	            Адміністратор	        Видалення облікового запису користувача 
/api/users/all	                  GET	                Адміністратор	        Отримання усіх користувачів системи
/api/users/profile	              GET	                Всі користувачі	      Отримання даних облікового запису користувача
/api/users/patients	              GET	                Адміністратор	        Отримання даних усіх пацієнтів
/api/users /doctors	              GET	                Адміністратор	        Отримання даних усіх докторів
/api/medical-records/all          GET	                Лікар, Адміністратор	Отримання усіх медичних записів пацієнтів
/api/medical-records/create	      POST              	Лікар	                Створення нового медичного запису пацієнта
/api/medical-records/update/:id	  PUT	                Лікар	                Редагування медичного запису пацієнта
/api/medical-records/delete/:id	  DELETE	            Лікар                	Видалення медичного запису пацієнта
/api/appointments/all	            GET                	Адміністратор	        Отримання усіх записів на прийом
/api/appointments/create	        POST	              Користувач	          Створення запису на прийом до лікаря
/api/appointments/update/:id	    PUT	                Адміністратор	        Редагування запису на прийом 
/api/appointments/delete/:id	    DELETE	            Адміністратор	        Видалення запису на прийом
/api/appointments/doctor/:id	    GET	                Лікар	                Отримання списку записів на прийом до конкретного лікаря 
/api/schedules/create	            POST	              Адміністратор	        Створення розкладу роботи для лікаря
/api/schedules/update/:id	        PUT	                Адміністратор	        Редагування розкладу роботи лікаря
/api/schedules/delete/:id	        DELETE	            Адміністратор	        Видалення розкладу роботи лікаря
/api/schedules/all	              GET	                Адміністратор, Лікар	Отримання розкладу усіх лікарів
/api/finances/create	            POST	              Адміністратор	        Створення рахунку
/api/finances/update/:id	        PUT	                Адміністратор	        Редагування рахунку
/api/finances/delete/:id	        DELETE	            Адміністратор	        Видалення рахунку
/api/finances/all	                GET	                Адміністратор	        Отримання усіх рахунків
 
Отже, за допомогою таблиці специфікації REST було визначено кінцеві точки для запитів для розробленого серверного застосунку.

ВИСНОВКИ

Під час виконання лабораторної роботи було здобуто навички з проектування серверної частини програмної системи, створення сценаріїв використання, розробки діаграм розгортання та пакетів, а також проектування бази даних. Було розроблено програмну реалізацію серверної частини програмної системи.
